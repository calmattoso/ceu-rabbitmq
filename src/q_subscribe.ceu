#ifndef _Q_SUBSCRIBE_CEU
#define _Q_SUBSCRIBE_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"
#include "connection.ceu"
#include "channel_data.ceu"
#include "release.ceu"
#include "queue.ceu"
#include "q2x_bind.ceu"

native/plain
    _amqp_basic_consume_ok_t,
;

native/nohold
    _amqp_basic_consume,
    _amqp_basic_cancel,
;

data SubscribeContext with
    var bool          no_local  = false;
    var bool          no_ack    = true;
    var bool          exclusive = false;
    var _amqp_table_t arguments = _amqp_empty_table;
end

data Release_Target.Subscribe with
    var _amqp_bytes_t consumer_tag_bytes;
    vector&[] byte ctag_ceu_str;
end

code/await/dynamic Release_Entity(var& Channel channel, dynamic var& Release_Target.Subscribe target) -> void 
do
    emit channel.pause_consuming;
    await async/thread(channel, target) do  
        _amqp_basic_cancel(&&channel.conn.state, channel.id, target.consumer_tag_bytes);
    end

    var int err;
    CHECK_AMQP_ERROR(err, channel.conn, "Failed to unsubscribe from queue.");
    [[
        rmq_ctag_htag[@target.ctag_ceu_str] = nil
        rmq_ctag_ack[@target.ctag_ceu_str]  = nil
    ]] 
    emit channel.start_consuming;
end

code/await Subscribe_Queue (var& Channel channel, var& Queue queue, 
                            var SubscribeContext ctx, var int handler_tag) 
                                -> (event& void ok)
                                    -> FOREVER
do
    event void ok_;
    ok = &ok_;

    // amqp_basic_consume_ok_t *
    // AMQP_CALL amqp_basic_consume(amqp_connection_state_t state, amqp_channel_t channel,
    //                              amqp_bytes_t queue, amqp_bytes_t consumer_tag, 
    //                              amqp_boolean_t no_local, amqp_boolean_t no_ack,
    //                              amqp_boolean_t exclusive, amqp_table_t arguments)
    var _amqp_bytes_t consumer_tag_bytes_ = _amqp_empty_bytes;

    emit channel.pause_consuming;
    await async/thread(channel, ctx, queue, consumer_tag_bytes_) do
        var _amqp_basic_consume_ok_t&& consume_ok_r = 
            _amqp_basic_consume(&&channel.conn.state, channel.id, queue.name_bytes, 
                                consumer_tag_bytes_, ctx.no_local as _amqp_boolean_t, 
                                ctx.no_ack as _amqp_boolean_t, ctx.exclusive as _amqp_boolean_t, 
                                ctx.arguments);
        consumer_tag_bytes_ = consume_ok_r:consumer_tag;  
    end

    var int err;
    CHECK_AMQP_ERROR(err, channel.conn, "Failed to subscribe to queue.");

    var _plain_string ctag_str = _stringify_bytes(consumer_tag_bytes_);
    vector[] byte ctag_ceu_str = [] .. (ctag_str as _char&&);
    _free(ctag_str);

    [[
        rmq_ctag_htag[@ctag_ceu_str] = @handler_tag
        rmq_ctag_ack[@ctag_ceu_str]  = @ctx.no_ack
    ]]

#ifdef DEBUG
    _printf("Subscribed to queue `%s` with ctag `%s`and mapped it to htag `%d`.\n", 
            _stringify_bytes(queue.name_bytes),
            _stringify_bytes(consumer_tag_bytes_),
            handler_tag);
#endif 

    emit channel.start_consuming;
    emit ok_;

    var Release_Target.Subscribe sub_target = val Release_Target.Subscribe(consumer_tag_bytes_, &ctag_ceu_str);
    do finalize with
        spawn/dynamic Release_Entity(&channel, &sub_target) in outer.default_release_pool;
#ifdef DEBUG
        _printf("Unsubscribed from queue `%s` with ctag `%s`and unmapped it from htag `%d`.\n", 
                _stringify_bytes(queue.name_bytes),
                _stringify_bytes(consumer_tag_bytes_),
                handler_tag);
#endif
    end


    await FOREVER;
end

#ifdef q_subscribe_test
#include "channel.ceu"

var& Connection conn;
event& void conn_ok;
watching New_Connection(_) -> (&conn, &conn_ok) do
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;

    spawn Channel_Consume(&channel, &default_handlers);

    var& Queue queue;
    event& void q_ok;
    spawn New_Queue(&channel, QueueContext("hello",_,_,_,_,_amqp_empty_table)) -> (&queue, &q_ok);
    await q_ok;

    event& void bind_ok;
    spawn Bind_Queue(&channel, &queue, &amq_direct, "hello", _amqp_empty_table) -> (&bind_ok);
    await bind_ok;

    event& void qsub_ok;
    spawn Subscribe_Queue(&channel, &queue, _, 23) -> (&qsub_ok);
    await qsub_ok;

    await 2s;
end

escape 0;
#endif

#endif
