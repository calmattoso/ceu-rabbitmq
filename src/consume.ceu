#ifndef _CONSUME_CEU
#define _CONSUME_CEU

#include "connection.ceu"
#include "channel.ceu"
#include "q2x_bind.ceu"
#include "exchange.ceu"
#include "queue.ceu"
#include "handler.ceu"

native @nohold _amqp_destroy_envelope; // immediately destroys the internal message buffer

class LowHandler with
  var _amqp_envelope_t message;
  pool Queue[]& queues;
do
  finalize with
    _amqp_destroy_envelope(&&message);
  end
  do Handler with
    this.message = message;
    this.queues  = &queues;
  end;
end

class Consume with
input:
  var Channel& channel;
  pool LowHandler[]& handlers;
  pool Queue[]& queues;
do
  native/pre do
    ##include <stdlib.h>
    ##include <stdio.h>
    ##include <string.h>
    ##include <stdint.h>
    
    ##include <amqp_tcp_socket.h>
    ##include <amqp.h>
    ##include <amqp_framing.h>

    ##include "utils.c"
  end

  // prototype hacks
  native @plain   _amqp_boolean_t; // this is an `int`
  native @plain   _amqp_basic_properties_t;   // properties for basic methods
  native @plain   _amqp_bytes_t;   // amqp representation for strings; `struct` with inner bytes pointer: https://git.io/vrcWN
  native @plain   _amqp_table_t;   // arguments for method; simple `struct` with inner pointer: https://git.io/vrcW9
  native @plain   _amqp_rpc_reply_t;
  native @plain   _amqp_envelope_t; // message envelope. `struct` with inner pointer
  native @pure    _amqp_consume_message;
  native @pure    _amqp_cstring_bytes; // no `malloc` is done internally, it just points to `char*` as `void*`
  native @nohold  _amqp_get_rpc_reply;
  native @nohold  _stringify_bytes;
  native @nohold  _strcmp;

  //await this.consume;
  _printf("Consuming...\n");

  loop do   
    var _amqp_envelope_t  message = _amqp_envelope_t();

    // Get messages from queue we're listening to.
    async/thread (channel, message) do
        // amqp_consume_message(amqp_connection_state_t state, amqp_envelope_t *envelope,
        //                      struct timeval *timeout, AMQP_UNUSED int flags)
        _amqp_consume_message(&&channel.conn.state, &&message, null, 0);
    end
    _printf("Received messaged with ctag %s\n", _stringify_bytes(message.consumer_tag));

    spawn LowHandler in handlers with
      this.message = message;
      this.queues  = &queues; 
    end;
  end
end

#if 1
// little test
  watching default_connection do
    var Channel ch with
      this.conn = &default_connection;
    end;
    _printf("Channel ID: %d\n", ch.id);

    watching ch do
      pool Queue[] qs;
      pool LowHandler[] hs;

      var Exchange amq_direct with
        this.channel = &ch;
        this.name = [].."amq.direct";
        this.type = [].."direct";
        this.passive = false;
        this.durable = true;
        this.auto_delete = false;
        this.internal = false;
        this.arguments = _amqp_empty_table;
      end;
      _printf("Using default direct exchange 'amq.direct'.\n");

      var Queue&&? q1 = spawn Queue in qs with
        this.channel = &ch;
        this.name = [].."queue";
        this.passive = false;
        this.durable = false;
        this.exclusive = false;
        this.auto_delete = true;
        this.create_arguments = _amqp_empty_table;

        this.no_local = false;
        this.no_ack = true;
        this.consume_exclusive = false;
        this.consume_arguments = _amqp_empty_table;
      end;

      var Queue&&? q2 = spawn Queue in qs with
        this.channel = &ch;
        this.name = [].."queue2";
        this.passive = false;
        this.durable = false;
        this.exclusive = false;
        this.auto_delete = true;
        this.create_arguments = _amqp_empty_table;

        this.no_local = false;
        this.no_ack = true;
        this.consume_exclusive = false;
        this.consume_arguments = _amqp_empty_table;
      end;

      var Q2X_Bind q2x_b1 with
        this.channel  = &ch;
		    this.queue    = q1!;
        this.exchange = &amq_direct;
        this.binding_key = [].."test1";
        this.arguments = _amqp_empty_table;
      end;

      var Q2X_Bind q2x_b2 with
        this.channel  = &ch;
		    this.queue    = q2!;
        this.exchange = &amq_direct;
        this.binding_key = [].."test2";
        this.arguments = _amqp_empty_table;
      end;  

      var Consume com with
        this.channel  = &ch;
        this.handlers = &hs;
        this.queues   = &qs;
      end;

      await com;
    end
  end

escape 0;
#endif

#endif
