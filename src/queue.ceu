#ifndef _QUEUE_CEU
#define _QUEUE_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"
#include "connection.ceu"
#include "channel.ceu"

native/plain
    _amqp_queue_declare_ok_t,
;

native/nohold
    _amqp_queue_declare,
    _amqp_queue_delete,
;

data Queue with
    var _amqp_bytes_t name_bytes;
end

data QueueContext with
    var _plain_string name;
    var bool          passive     = false;
    var bool          durable     = false;
    var bool          exclusive   = false;
    var bool          auto_delete = true;
    var _amqp_table_t arguments   = _amqp_empty_table;
end

code/await New_Queue (var& Channel channel, var QueueContext ctx)
                        -> (var& Queue q, event& void ok)
                            -> FOREVER
do
    event void ok_;
    ok = &ok_;

    var _amqp_bytes_t name_bytes;
    if ctx.name != null then  
        name_bytes = _amqp_cstring_bytes(ctx.name);
    else
        name_bytes = _amqp_empty_bytes;
    end

    //_printf("%d %d %d %d\n", ctx.passive, ctx.durable, ctx.exclusive, ctx.auto_delete);

    // Create the queue
    // amqp_queue_declare(amqp_connection_state_t state, amqp_channel_t channel,
    //                    amqp_bytes_t queue, amqp_boolean_t passive, 
    //                    amqp_boolean_t durable, amqp_boolean_t exclusive, 
    //                    amqp_boolean_t auto_delete, amqp_table_t arguments);
    var Queue q_ = val Queue(_);
    q = &q_;

    emit channel.pause_consuming;
    await async/thread(channel, ctx, name_bytes, q_) do 
        var _amqp_queue_declare_ok_t&& r = 
            _amqp_queue_declare(&&channel.conn.state, channel.id, name_bytes, 
                                ctx.passive as _amqp_boolean_t, 
                                ctx.durable as _amqp_boolean_t,
                                ctx.exclusive as _amqp_boolean_t,
                                ctx.auto_delete as _amqp_boolean_t,
                                ctx.arguments);
        q_.name_bytes = (*r).queue; 
    end
    var int err;
    CHECK_AMQP_ERROR(err, channel.conn, "Declaring queue.");

#ifdef DEBUG
    _printf("Declared queue with name `%s`.\n", _stringify_bytes(q_.name_bytes));
#endif

    emit channel.start_consuming;
    emit ok_;

    /* Delete queue upon termination...
    do finalize with
        
        _amqp_queue_delete(&&channel.conn.state, channel.id, name_bytes, false, false);
        _die_on_amqp_error(_amqp_get_rpc_reply(&&channel.conn.state), "Deleting queue.");
#ifdef DEBUG
        _printf("Deleted queue with name `%s`.\n", _stringify_bytes(q_.name_bytes));
#endif
    end*/

    await FOREVER;
end

#if queue_test
// little test
var& Connection conn;
event& void conn_ok;
watching New_Connection(_) -> (&conn, &conn_ok) do
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;

    spawn Channel_Consume(&channel, &default_handlers);

    var& Queue q;
    event& void q_ok1;
    spawn New_Queue(&channel, QueueContext("test_queue",_,_,_,_,_)) -> (&q, &q_ok1);
    await q_ok1;

    var& Queue q2;
    event& void q_ok2;
    spawn New_Queue(&channel, QueueContext("",_,_,_,false,_)) -> (&q2, &q_ok2);
    await q_ok2;

    var& Queue q_null_name;
    event& void q_ok3;
    spawn New_Queue(&channel, _) -> (&q_null_name, &q_ok3);
    await q_ok3;

    await 2s;
end

escape 0;
#endif

#endif
