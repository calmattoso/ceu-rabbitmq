#ifndef _EXCHANGE_CEU
#define _EXCHANGE_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"
#include "connection.ceu"
#include "channel_data.ceu"

#define AMQ_DEFAULT_TYPE "direct"

#define AMQ_DEFAULT ""
#define AMQ_DIRECT  "amq.direct"
#define AMQ_TOPIC   "amq.topic"
#define AMQ_FANOUT  "amq.fanout"
#define AMQ_HEADERS "amq.headers"

native/nohold
    _amqp_exchange_declare,
;

data Exchange with
    var _amqp_bytes_t name_bytes;
end

data ExchangeContext with
    var _plain_string name;
    var _plain_string type        = AMQ_DEFAULT_TYPE;
    var bool          passive     = false;
    var bool          durable     = false;
    var bool          auto_delete = true;
    var bool          internal    = false;
    var _amqp_table_t arguments   = _amqp_empty_table;
end

code/await New_Exchange (var& Channel channel, var ExchangeContext ctx)
                            -> (var& Exchange ex, event& void ok)
                                -> FOREVER
do
    event void ok_;
    ok = &ok_;

    // Convert the exchange name to the expected format, if pre-defined by user
    var _amqp_bytes_t name_bytes;
    if ctx.name != null then
       name_bytes = _amqp_cstring_bytes(ctx.name); // if empty, uses the default `amq.direct` exchange
    else
       name_bytes = _amqp_cstring_bytes(AMQ_DEFAULT);
    end

    // Export the exchange
    var Exchange ex_ = val Exchange(name_bytes);
    ex = &ex_;

    // If a default exchange is to be used, do not make a declare request
    if name_bytes.len > 0 // default
       and _strcmp(ctx.name, AMQ_DIRECT)  != 0
       and _strcmp(ctx.name, AMQ_TOPIC)   != 0
       and _strcmp(ctx.name, AMQ_FANOUT)  != 0
       and _strcmp(ctx.name, AMQ_HEADERS) != 0 then
        var _amqp_bytes_t type_bytes;
        if ctx.type != null then
            type_bytes = _amqp_cstring_bytes(ctx.type);
        else
            type_bytes = _amqp_cstring_bytes(AMQ_DEFAULT_TYPE);
        end

        // Declare the exchange
        // amqp_exchange_declare(amqp_connection_state_t state, amqp_channel_t channel,
        //                       amqp_bytes_t exchange, amqp_bytes_t type, amqp_boolean_t passive,
        //                       amqp_boolean_t durable, amqp_boolean_t auto_delete, 
        //                       amqp_boolean_t internal, amqp_table_t arguments);
        emit channel.pause_consuming;
        await async/thread(channel, ctx, name_bytes, type_bytes) do
            _amqp_exchange_declare(&&channel.conn.state, channel.id, name_bytes, 
                                   type_bytes, ctx.passive as _amqp_boolean_t, 
                                   ctx.durable as _amqp_boolean_t, ctx.auto_delete as _amqp_boolean_t,
                                   ctx.internal as _amqp_boolean_t, ctx.arguments);
        end
        var int err;
        CHECK_AMQP_ERROR(err, channel.conn, "Declaring exchange");

#ifdef DEBUG
        _printf("Declared exchange of type `%s` with name `%s`.\n", ctx.type, ctx.name);
#endif

        emit channel.start_consuming;
    else
        await 1us;
#ifdef DEBUG
        _printf("Using default exchange `%s`.\n", _stringify_bytes(name_bytes));
#endif    
    end

    //await 1s;
    emit ok_;

    await FOREVER;
end

// All new default exchanges! Save time and money by using these.
var Exchange amq_default = val Exchange(_amqp_cstring_bytes(AMQ_DEFAULT)),
             amq_direct  = val Exchange(_amqp_cstring_bytes(AMQ_DIRECT)),
             amq_topic   = val Exchange(_amqp_cstring_bytes(AMQ_TOPIC)),
             amq_fanout  = val Exchange(_amqp_cstring_bytes(AMQ_FANOUT)),
             amq_headers = val Exchange(_amqp_cstring_bytes(AMQ_HEADERS));

#ifdef exchange_test
#include "channel.ceu"

var& Connection conn;
event& void conn_ok;

watching New_Connection(_) -> (&conn, &conn_ok) do
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;
        
    spawn Channel_Consume(&channel, &default_handlers);

    var& Exchange e;
    event& void ex_ok1;
    spawn New_Exchange(&channel, ExchangeContext("test_exchange_topic", "topic",_,_,_,_,_)) -> (&e, &ex_ok1);
    await ex_ok1;

    var& Exchange e2;
    event& void ex_ok2;
    spawn New_Exchange(&channel, ExchangeContext("test_exchange_direct",_,_,_,_,_,_)) -> (&e2, &ex_ok2);
    await ex_ok2;

    // Below shows the function "creates" the default exchange correctly. However,
    // the default instantiated exchanges should be used instead.
    var& Exchange user_amq_def;
    event& void ex_ok3;
    spawn New_Exchange(&channel, _) -> (&user_amq_def, &ex_ok3); // no await here
    await ex_ok3;

    await 2s;
end

escape 0;
#endif

#endif
