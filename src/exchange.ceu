#ifndef _EXCHANGE_CEU
#define _EXCHANGE_CEU

#include "connection.ceu"
#include "channel.ceu"

class Exchange with
  var Channel& channel;
input:
  var char[] name;
  var char[] type;
  var bool   passive;
  var bool   durable;
  var bool   auto_delete;
  var bool   internal;

  var _amqp_table_t arguments;
output:
  var _amqp_bytes_t name_bytes; // export the exchange name in the library format
do
  native/pre do
    ##include <stdlib.h>
    ##include <stdio.h>
    ##include <string.h>
    ##include <stdint.h>
    
    ##include <amqp_tcp_socket.h>
    ##include <amqp.h>
    ##include <amqp_framing.h>

    ##include "utils.c"
  end

  // prototype hacks
  native @plain   _amqp_boolean_t; // this is an `int`
  native @plain   _amqp_table_t;   // arguments for method; simple `struct` with inner pointer: https://git.io/vrcW9
  native @plain   _amqp_bytes_t;   // amqp representation for strings; `struct` with inner bytes pointer: https://git.io/vrcWN
  native @plain   _amqp_connection_state_t_;
  native @nohold  _amqp_get_rpc_reply;
  native @nohold  _amqp_bytes_malloc_dup;
  native @nohold  _stringify_bytes;
  native @nohold  _free;
  native @pure    _amqp_exchange_declare;
  native @pure    _amqp_cstring_bytes; // no `malloc` is done internally, it just points to `char*` as `void*`
  native @pure    _strlen;

  // BODY

  // Convert the exchange name to the expected format, if pre-defined by user
  name_bytes = _amqp_cstring_bytes((_char&&)&&name); // if empty, uses the default `amq.direct` exchange
  if name_bytes.len then // if empty, the default exchange is being used and it can't be declared
    var _amqp_bytes_t type_bytes = _amqp_cstring_bytes((_char&&)&&type);

    // Declare the exchange
    // amqp_exchange_declare(amqp_connection_state_t state, amqp_channel_t channel,
    //                       amqp_bytes_t exchange, amqp_bytes_t type, amqp_boolean_t passive,
    //                       amqp_boolean_t durable, amqp_boolean_t auto_delete, 
    //                       amqp_boolean_t internal, amqp_table_t arguments);
    _amqp_exchange_declare(&&channel.conn.state, channel.id, name_bytes, 
                           type_bytes, (_amqp_boolean_t) passive, 
                           (_amqp_boolean_t) durable, (_amqp_boolean_t) auto_delete,
                           (_amqp_boolean_t) internal, arguments);
    _die_on_amqp_error(_amqp_get_rpc_reply(&&channel.conn.state), "Declaring exchange");
  end

  await FOREVER;
end

class Exchange_AMQ_Direct with
  var Channel& channel;
output:
  var Exchange& exchange;
do
  var Exchange amq_direct with
    this.channel = &channel;
    this.name = [].."amq.direct";
    this.type = [].."direct";
    this.passive = false;
    this.durable = true;
    this.auto_delete = false;
    this.internal = false;
    this.arguments = _amqp_empty_table;
  end;
  exchange = &amq_direct;
  await FOREVER;
end

#if 0
// little test
input void TEST_CLOSE;
par/or do
  var Connection c with
    this.hostname = [] .. "localhost";
    this.port = 5672;
    this.vhost = [] .. "/";
    this.channel_max = 0;
    this.frame_max = 131072;
    this.sasl_method = _AMQP_SASL_METHOD_PLAIN;
    this.user = [] .. "guest";
    this.password = [] .. "guest";
  end;

  watching c do
    var Channel ch with
      this.conn = &c;
    end;
    _printf("Channel ID: %d\n", ch.id);

    watching ch do
      var Exchange e with
        this.channel = &ch;
        this.name = [].."test_exchange_topic";
        this.type = [].."topic";
        this.passive = false;
        this.durable = false;
        this.auto_delete = true;
        this.internal = false;
        this.arguments = _amqp_empty_table;
      end;
      _printf("Created Exchange 'topic' with name '%s'.\n", 
              _stringify_bytes(e.name_bytes));

      var Exchange e2 with
        this.channel = &ch;
        this.name = [].."test_exchange_direct";
        this.type = [].."direct";
        this.passive = false;
        this.durable = false;
        this.auto_delete = true;
        this.internal = false;
        this.arguments = _amqp_empty_table;
      end;
      _printf("Created Exchange 'direct' with name '%s'.\n", 
              _stringify_bytes(e2.name_bytes));

      var Exchange_AMQ_Direct e with
        this.channel = &ch;
      end;
      var Exchange& amq_direct = &e.exchange;
      _printf("Using default exchange.\n");
     
      await TEST_CLOSE;
    end
  end
with
  async do
    emit TEST_CLOSE;
  end
end

escape 0;
#endif

#endif
