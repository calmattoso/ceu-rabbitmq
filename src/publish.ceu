#ifndef _PUBLISH_CEU
#define _PUBLISH_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"
#include "connection.ceu"
#include "channel.ceu"
#include "exchange.ceu"

native/pure
    _new_props,
;

native/plain
    _AMQP_BASIC_CONTENT_TYPE_FLAG,
    _AMQP_BASIC_DELIVERY_MODE_FLAG,
;

native/nohold
    _amqp_basic_publish,
;

native/pre do
    amqp_basic_properties_t new_props() {
        amqp_basic_properties_t props;

        return props;
    }
end

var _amqp_basic_properties_t default_props = _new_props();
default_props.__flags = _AMQP_BASIC_CONTENT_TYPE_FLAG | _AMQP_BASIC_DELIVERY_MODE_FLAG;
default_props.content_type = _amqp_cstring_bytes("text/plain");
default_props.delivery_mode = 2;

data PublishContext with
    var  _plain_string            routing_key;
    var  _plain_string            body;
    var  bool                     mandatory  = false;
    var  bool                     immediate  = false;
    var  _amqp_basic_properties_t properties;
end

code/await Publish (var& Channel channel, var& Exchange exchange, 
                    var PublishContext ctx) 
                        -> void
do
    // BODY: just shoots a message to the broker
    // int amqp_basic_publish(amqp_connection_state_t state, amqp_channel_t channel,
    //                        amqp_bytes_t exchange, amqp_bytes_t routing_key,
    //                        amqp_boolean_t mandatory, amqp_boolean_t immediate,
    //                        struct amqp_basic_properties_t_ const *properties,
    //                        amqp_bytes_t body)
    await async/thread (channel, exchange, ctx) do
        var int ret = 0;

        var _amqp_bytes_t body_bytes        = _amqp_cstring_bytes(ctx.body),
                          routing_key_bytes = _amqp_cstring_bytes(ctx.routing_key);
    
        atomic do
            ret = _amqp_basic_publish(&&channel.conn.state, channel.id, exchange.name_bytes,
                                      routing_key_bytes, ctx.mandatory as _amqp_boolean_t,
                                      ctx.immediate as _amqp_boolean_t, &&ctx.properties, body_bytes);
        end
        _die_on_error(ret, "Failed to publish message.");
#ifdef DEBUG
        _printf("Published message!\n");
#endif
    end
end

#ifdef publish_test
// little test
var& Connection conn;
event& void conn_ok;

spawn New_Connection(ConnectionContext(_,_,_,_,_,_,_,_)) -> (&conn, &conn_ok);
await conn_ok;

var& Channel channel;
spawn New_Channel(&conn) -> (&channel);       

par/or do
    every 500ms do
        spawn Publish(&channel, &amq_direct, 
                      PublishContext("hello", "Hello from Ceu!",
                                     _,_,default_props));
    end
with    
    await (2.1)s;
end

escape 0;
#endif

#endif
