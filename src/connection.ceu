#ifndef _CONNECTION_CEU
#define _CONNECTION_CEU

#include <c.ceu>
#include <uv/uv.ceu>

native/pre do
    ##include <stdlib.h>
    ##include <stdio.h>
    ##include <string.h>

    ##include <stdint.h>
    ##include <amqp_tcp_socket.h>
    ##include <amqp.h>
    ##include <amqp_framing.h>

    typedef struct amqp_connection_state_t_ amqp_connection_state_t_;
    typedef char* plain_string;

    ##include "utils.c"
end

native/plain _plain_string;

native/nohold
    _amqp_connection_close,
    _amqp_destroy_connection,
    _amqp_login,
    _amqp_socket_open,
    _amqp_tcp_socket_new,
    _die_on_amqp_error,
    _die_on_error,
;

native
    _AMQP_REPLY_SUCCESS,
    _AMQP_SASL_METHOD_PLAIN,
    _amqp_connection_state_t_,
    _amqp_new_connection,
    _amqp_rpc_reply_t,
    _amqp_socket_t,
    _die,
;

code/await Connection (var _plain_string hostname,
                       var int           port,
                       var _plain_string vhost,
                       var int           channel_max,
                       var int           frame_max,
                       var int           sasl_method,
                       var _plain_string user,
                       var _plain_string password)
                            -> (var& _amqp_connection_state_t_ conn,
                                var& int channel_id)
                                -> void
do
    var&? _amqp_connection_state_t_ conn_;
    do
        conn_ = &_amqp_new_connection();
    finalize (conn_) with
        var _amqp_rpc_reply_t res = _amqp_connection_close(&&conn_!, _AMQP_REPLY_SUCCESS);
        _die_on_amqp_error(res, "Closing connection.");
        _die_on_error(_amqp_destroy_connection(&&conn_!), "Destroying connection object."); // garbage collection
#if 1
        _printf("Closed connection.\n");
#endif
    end
    conn = &conn_!;

    var int channel_id_ = 1;
    channel_id = &channel_id_;

    var _amqp_socket_t&& socket = _amqp_tcp_socket_new(&&conn_!);
	if socket == null then
	    _die("creating TCP socket");
	end

	var int status = _amqp_socket_open(socket, hostname, port);
	if status != 0 then
        _die("opening TCP socket");
	end

    // requires "plain_string"
    await async/thread (conn_, vhost, channel_max, frame_max,
                        sasl_method, user, password)
    do
        var _amqp_rpc_reply_t res = _amqp_login(&&conn_!, vhost, channel_max,
                                                frame_max, 0, sasl_method,
                                                user, password);
        _die_on_amqp_error(res, "Logging in");
    end

#if 1
    _printf("Opened connection.\n");
#endif

    await FOREVER;
end

#if 1
// little test
spawn Connection("localhost", 5672, "/", 0, 131072,
                 _AMQP_SASL_METHOD_PLAIN, "guest", "guest");
await 2s;
escape 0;
#endif

#endif
