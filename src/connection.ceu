#ifndef _CONNECTION_CEU
#define _CONNECTION_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"

native/nohold
    _amqp_connection_close,
    _amqp_destroy_connection,
    _amqp_login,
    _amqp_socket_open,
    _amqp_tcp_socket_new,
;

native/const
    _AMQP_SASL_METHOD_PLAIN,
;

native
    _amqp_connection_state_t_,
    _amqp_new_connection,
    _amqp_socket_t,
;

#define RMQ_Connection(CTX, CONN, CONN_OK) spawn New_Connection(CTX) -> (&CONN, &CONN_OK); await CONN_OK

data Connection with
    var& _amqp_connection_state_t_ state;
    var int channel_id;
end

data ConnectionContext with
    var _plain_string hostname    = "localhost";
    var int           port        = 5672;
    var _plain_string vhost       = "/";
    var int           channel_max = 0;
    var int           frame_max   = 131072;
    var int           sasl_method = 0;//_AMQP_SASL_METHOD_PLAIN;
    var _plain_string user        = "guest";
    var _plain_string password    = "guest";
end

code/await New_Connection (var ConnectionContext ctx) 
                            -> (var& Connection conn, event& void ok)
                                -> FOREVER
do
    var&? _amqp_connection_state_t_ state_;
    do
        state_ = &_amqp_new_connection();
    finalize (state_) with
        var _amqp_rpc_reply_t res = _amqp_connection_close(&&state_!, _AMQP_REPLY_SUCCESS);
        _die_on_amqp_error(res, "Closing connection.");
        _die_on_error(_amqp_destroy_connection(&&state_!), "Destroying connection object."); // garbage collection
#ifdef DEBUG
        _printf("Closed connection.\n");
#endif
    end

    var Connection conn_ = val Connection(&state_!, 1);
    conn = &conn_;

    var _amqp_socket_t&& socket = _amqp_tcp_socket_new(&&state_!);
	if socket == null then
	    _die("creating TCP socket");
	end

	var int status = _amqp_socket_open(socket, ctx.hostname, ctx.port);
	if status != 0 then
        _die("opening TCP socket");
	end

    event void ok_;
    ok = &ok_;

    // requires "plain_string"
    await async/thread (ctx, state_)
    do
        var _amqp_rpc_reply_t res = _amqp_login(&&state_!, ctx.vhost, ctx.channel_max,
                                                ctx.frame_max, 0, ctx.sasl_method,
                                                ctx.user, ctx.password);
        _die_on_amqp_error(res, "Logging in");
#ifdef DEBUG
        _printf("Opened connection with context: { \n");
        _printf("\thostname: %s,\n\tport: %d,\n\tvhost: %s,\n\tchannel_max: %d,\n",
                ctx.hostname, ctx.port, ctx.vhost, ctx.channel_max);
        _printf("\tframe_max: %d,\n\tsasl_method: %d, \n\tuser: %s,\n\tpw: %s\n}\n",
                ctx.frame_max, ctx.sasl_method, ctx.user, ctx.password);
#endif
    end
    emit ok_;

    await FOREVER;
end

code/tight Next_Channel_Id(var& Connection conn) -> int do
    var int channel_id = conn.channel_id;
    conn.channel_id = conn.channel_id + 1;
    escape channel_id;
end

#ifdef connection_test
var& Connection conn;
event& void conn_ok;

// little test
RMQ_Connection(_, conn, conn_ok);

var int channel_id = call Next_Channel_Id(&conn);
_printf("Cur. Channel ID: %d\nNext Channel ID: %d\n", channel_id, conn.channel_id);

await 2s;
escape 0;
#endif

#endif
