#ifndef _QOS_CEU
#define _QOS_CEU

#include <c.ceu>
#include <uv/uv.ceu>

#include "amqp_base.ceu"
#include "release.ceu"
#include "connection.ceu"
#include "channel.ceu"

#define AMQP_CONSUME_MAX_PREFETCH_COUNT 65535
native/nohold
    _amqp_basic_qos,
;

data QosContext with
    var int  prefetch_count = AMQP_CONSUME_MAX_PREFETCH_COUNT;
    var bool global         = false;
end

data Release_Target.Qos with
    var byte dummy;
end

code/await/dynamic Release_Entity(var& Channel channel, dynamic var& Release_Target.Qos target) -> void
do
    emit channel.pause_consuming;

    var int err = 0;
    await async/thread(channel, err) do
        err = _amqp_basic_qos(&&channel.conn.state, channel.id, 0, AMQP_CONSUME_MAX_PREFETCH_COUNT, false);
    end
    if err == 0 then
        _fprintf(_stderr, "ERR :: basic.qos: %d\n", err);
	    emit channel.conn.error(err);
    end

#ifdef DEBUG
    _printf("Restored QOS to default values...\n");  
#endif

    emit channel.start_consuming;
end

code/await Qos(var& Channel channel, var QosContext ctx) 
                -> (event& void ok)                
                    -> FOREVER
do
    event void ok_;
    ok = &ok_;

    var int err = 0;
    emit channel.pause_consuming;
    await async/thread(channel, ctx, err) do
        err = _amqp_basic_qos(&&channel.conn.state, channel.id, 0, ctx.prefetch_count, ctx.global);
    end
    
    if err == 0 then
        _fprintf(_stderr, "ERR :: basic.qos: %d\n", err);
	    emit channel.conn.error(err);
    end
#ifdef DEBUG
    _printf("Set `prefetch` to %d with `global` == %d\n", ctx.prefetch_count, ctx.global);  
#endif

    var Release_Target.Qos target_qos = val Release_Target.Qos(_);
    do finalize with
        //_amqp_basic_qos(&&channel.conn.state, channel.id, 0, AMQP_CONSUME_MAX_PREFETCH_COUNT, false);
        spawn/dynamic Release_Entity(&channel, &target_qos) in outer.default_release_pool;
    end
    
    emit channel.start_consuming;
    emit ok_;

    await FOREVER;
end

#ifdef qos_test
var& Connection conn;
event& void conn_ok;
watching New_Connection(_) -> (&conn, &conn_ok) do
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;

    spawn Channel_Consume(&channel, &default_handlers);

    event& void qos_ok;
    spawn Qos(&channel, QosContext(1,true)) -> (&qos_ok);
    await qos_ok;

    await 1s;
end

escape 0;
#endif
#endif


