#ifndef _Q2X_CEU
#define _Q2X_CEU

#include <c.ceu>
#include <sdl/sdl.ceu>

#include "amqp_base.ceu"
#include "channel.ceu"
#include "queue.ceu"
#include "exchange.ceu"

native/nohold
    _amqp_queue_bind,
    _amqp_queue_unbind,
;

code/await Bind_Queue (var& Channel       channel, 
                     var& Queue         queue, 
                     var& Exchange      exchange, 
                     var  _plain_string binding_key,
                     var  _amqp_table_t arguments)
                        -> (event& void ok)
                            -> FOREVER
do
    event void ok_;
    ok = &ok_;

    var _amqp_bytes_t binding_key_bytes = _amqp_cstring_bytes(binding_key);

	// Bind queue to exchange
	// amqp_queue_bind(amqp_connection_state_t state, amqp_channel_t channel, 
    //                 amqp_bytes_t queue, amqp_bytes_t exchange, 
    //                 amqp_bytes_t routing_key, amqp_table_t arguments)
    await async/thread(channel, queue, exchange, binding_key_bytes, arguments) do
	    _amqp_queue_bind(&&channel.conn.state, channel.id, queue.name_bytes,
					     exchange.name_bytes, binding_key_bytes, arguments);
    end
    _die_on_amqp_error(_amqp_get_rpc_reply(&&channel.conn.state), "Binding queue to exchange.");
#ifdef DEBUG
    _printf("Bound queue `%s` to exchange `%s` with key `%s`.\n", 
            _stringify_bytes(queue.name_bytes),
            _stringify_bytes(exchange.name_bytes),
            binding_key);
#endif	
    emit ok_;					 
	
    do finalize with
        _amqp_queue_unbind(&&channel.conn.state, channel.id, queue.name_bytes,
                               exchange.name_bytes, binding_key_bytes, arguments);
#ifdef DEBUG
        _printf("Unbound queue `%s` and exchange `%s`.\n", 
                _stringify_bytes(queue.name_bytes), 
                _stringify_bytes(exchange.name_bytes));
#endif
    end

    await FOREVER;
end

#ifdef q2x_bind_test
par/or do
    var& Connection conn;
    event& void conn_ok;

    spawn New_Connection(_) -> (&conn, &conn_ok);
    await conn_ok;

    var& Channel channel;
    event& void ch_ok;
    spawn New_Channel(&conn) -> (&channel, &ch_ok);
    await ch_ok;

    var& Queue queue;
    event& void q_ok;
    spawn New_Queue(&channel, _) -> (&queue, &q_ok);
    await q_ok;

    event& void bind_ok;
    spawn Bind_Queue(&channel, &queue, &amq_direct, "baloney", _amqp_empty_table) 
            -> (&bind_ok);
    await bind_ok;
with
    await 2s;
end

escape 0;
#endif

#endif
